
--********************************************************************************--
--* S.T.A.L.K.E.R. Position Informer 0.3.5 Professional === Game Functional Mod  *--
--* Script version                                      === 3                    *--
--* Support Stalker                                     === Shadow of Chernobyl  *--
--* Autors                                              === V.I.R.U.S. \ Skunk   *--
--* Last Modified                                       === 5.10.2008            *--
--*                                                                              *--
--* COPYRIGHT 2008 ReaL Studio Teem                                              *--
--********************************************************************************--     

class "pi" (CUIScriptWnd)

function pi:__init(owner,objid) super()
	self.owner = owner
	self:InitControls()
	self:InitCallBacks()
end

function pi:__finalize() end

function pi:InitControls()
	self:Init(30,30,600,530)
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_position_informer.xml")
	xml:InitStatic("background", self)
	self:Register(xml:Init3tButton("caption1", self),"caption1")
	self:Register(xml:Init3tButton("caption2", self),"caption2")
	self:Register(xml:Init3tButton("btn_q", self),"btn_q")
	self:Register(xml:Init3tButton("btn_s", self),"btn_s")
	self:Register(xml:InitEditBox("edit_box", 	self), "edit_box")

self:Register(xml:Init3tButton("gamevertexid", self),"gamevertexid")
self:Register(xml:InitEditBox("gamevertexid_box", 	self), "gamevertexid_box")	
self:Register(xml:Init3tButton("levelname", self),"levelname")
self:Register(xml:InitEditBox("levelname_box", 	self), "levelname_box")
self:Register(xml:Init3tButton("btn_show", self),"btn_show")

self:Register(xml:Init3tButton("levelvertexid", self),"levelvertexid")
self:Register(xml:InitEditBox("levelvertexid_box", self),"levelvertexid_box")
self:Register(xml:Init3tButton("position", self),"position")
self:Register(xml:InitEditBox("positionX", self),"positionX")
self:Register(xml:InitEditBox("positionY", self),"positionY")
self:Register(xml:InitEditBox("positionZ", self),"positionZ")
self:Register(xml:Init3tButton("direction", self),"direction")
self:Register(xml:InitEditBox("directionX", self),"directionX")
self:Register(xml:InitEditBox("directionY", self),"directionY")
self:Register(xml:InitEditBox("directionZ", self),"directionZ")
self:Register(xml:Init3tButton("caption3", self),"caption3")
end

function pi:InitCallBacks()
	self:AddCallback("btn_q", ui_events.BUTTON_CLICKED, self.on_quit, self)
	self:AddCallback("btn_s", ui_events.BUTTON_CLICKED, self.getposinfo, self)
	self:AddCallback("btn_show", ui_events.BUTTON_CLICKED, self.showposinfo, self)
end

function pi:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:on_quit()
		end
		if dik == DIK_keys.DIK_RETURN then
			self.showposinfo()
		end
	end
	return true
end

local num=1

function pi:showposinfo()
local ln=level.name()
local gd=db.actor:game_vertex_id()
local ld=db.actor:level_vertex_id()
local pos=db.actor:position()
local posX=pos.x
local posY=pos.y
local posZ=pos.z
local dir=db.actor:direction()
local dirX=dir.x
local dirY=dir.y
local dirZ=dir.z
local posname=num

local levelname=self:GetEditBox("levelname_box")
local gamevertexid=self:GetEditBox("gamevertexid_box")
local levelvertexid=self:GetEditBox("levelvertexid_box")
local pX=self:GetEditBox("positionX")
local pY=self:GetEditBox("positionY")
local pZ=self:GetEditBox("positionZ")
local dX=self:GetEditBox("directionX")
local dY=self:GetEditBox("directionY")
local dZ=self:GetEditBox("directionZ")
local edit=self:GetEditBox("edit_box")

levelname:SetText(ln)
gamevertexid:SetText(gd)
levelvertexid:SetText(ld)
pX:SetText(posX)
pY:SetText(posY)
pZ:SetText(posZ)
dX:SetText(dirX)
dY:SetText(dirY)
dZ:SetText(dirZ)
edit:SetText("Point_"..posname)

num=num+1
end

function pi:getposinfo()
local ln=level.name()
local gd=db.actor:game_vertex_id()
local ld=db.actor:level_vertex_id()
local pos=db.actor:position()
local posX=pos.x
local posY=pos.y
local posZ=pos.z
local dir=db.actor:direction()
local dirX=dir.x
local dirY=dir.y
local dirZ=dir.z

local levelname=self:GetEditBox("levelname_box")
local gamevertexid=self:GetEditBox("gamevertexid_box")
local levelvertexid=self:GetEditBox("levelvertexid_box")
local pX=self:GetEditBox("positionX")
local pY=self:GetEditBox("positionY")
local pZ=self:GetEditBox("positionZ")
local dX=self:GetEditBox("directionX")
local dY=self:GetEditBox("directionY")
local dZ=self:GetEditBox("directionZ")
local posnamebox=self:GetEditBox("edit_box")
local posname=posnamebox:GetText()

posname=string.gsub(posname, "%s", "_")
posname=string.gsub(posname, "|", "/")

levelname:SetText(ln)
gamevertexid:SetText(gd)
levelvertexid:SetText(ld)
pX:SetText(posX)
pY:SetText(posY)
pZ:SetText(posZ)
dX:SetText(dirX)
dY:SetText(dirY)
dZ:SetText(dirZ)

if string.len(posname)>0 then
 get_console():execute("<Position_Informer_Script>")
 get_console():execute("posName="..posname)
 get_console():execute("levelName="..ln)
 get_console():execute("positionX="..posX)
 get_console():execute("positionY="..posY)
 get_console():execute("positionZ="..posZ)
 get_console():execute("directionX="..dirX)
 get_console():execute("directionY="..dirY)
 get_console():execute("directionZ="..dirZ)
 get_console():execute("LevelVertexID="..ld)
 get_console():execute("GameVertexID="..gd)
 get_console():execute("</Position_Informer_Script>")
end
end



function pi:on_quit()
	local console = get_console()
	self:GetHolder():start_stop_menu (self.owner, true)
	self:GetHolder():start_stop_menu (self,true)
	self.owner:Show	(true)
	if self:check_game() then
		console:execute("main_menu off")
	end
end

function pi:check_game()
	if level.present() and (db.actor ~= nil) and db.actor:alive() then
		return true
	else
		return false
	end
end
